.Dd June 20 2017
.Dt LIBJKISS 3
.Os
.Sh NAME
.Nm jkiss64_getseed ,
.Nm jkiss64_init ,
.Nm jkiss64_init_thread ,
.Nm jkiss64_rand ,
.Nm jkiss64_reseed ,
.Nm jkiss64_uniform
.Nd 64-bit KISS pRNG with pthread support
.Sh SYNOPSIS
.In jkiss.h
.Ft jkiss64_seed_t *
.Fn jkiss64_getseed "void"
.Ft int
.Fn jkiss64_init "void (*seed_func) (jkiss64_seed_t * seed)"
.Ft int
.Fn jkiss64_init_thread "void"
.Ft uint64_t
.Fn jkiss64_rand "void"
.Ft void
.Fn jkiss64_reseed "void"
.Ft uint64_t
.Fn jkiss64_uniform "uint64_t upper_bound"
.Sh DESCRIPTION
This library implements a thread-specific 64-bit KISS pseudo-random
number generator; a random seed is used or if necessary this can be set
to a specific value. The period of this pRNG function is around 2**250;
repeats due to long running processes that make heavy use of the RNG are
unlikely (though "warming up" a particular seed may be advisable; see
the paper by David Jones for details).
.Pp
The main thread must call
.Fn jkiss64_init
once before any other function from this library are used; subsequent
threads must thereafter first call
.Fn jkiss64_init_thread
before using any other call.
.Bl -tag -width Ds
.It Cm jkiss64_getseed
Returns a pointer to the seed structure of the calling thread.
.It Cm jkiss64_init
Primary initialization function; call this from the main thread before
any other calls to this library are made. A custom
.Fn seed_func
function can be passed instead of
.Dv NULL
to customize how the seed is set; the default seed function depending
on how this library is compiled will seed from either a random device
or via the
.Xr arc4random 3
call.
.It Cm jkiss64_init_thread
Sub-thread initialization function; call this from subsequent threads after
.Fn jkiss64_init
has been called in the main thread and before any other calls are made.
.It Cm jkiss64_rand
Returns a pseudo-random 64-bit value.
.It Cm jkiss64_reseed
Calls the
.Fn seed_func
to reseed the seed structure.
.It Cm jkiss64_uniform
Returns a pseudo-random value less than the given upper bound. This
should avoid any modulo bias. Note that modulo bias may be insignificant
should the upper bound be significantly less than
.Dv UINT64_MAX .
.El
.Sh SEED STRUCT
Various fields in this structure must not be
.Dv 0 ;
study the internal
.Fn jkiss64_seeder
function and paper by David Jones to learn why.
.Pp
.Dl typedef struct jkiss64_seed {
.Dl \& \& \& \&  uint64_t x;
.Dl \& \& \& \&  uint64_t y;
.Dl \& \& \& \&  uint32_t c1;
.Dl \& \& \& \&  uint32_t c2;
.Dl \& \& \& \&  uint32_t z1;
.Dl \& \& \& \&  uint32_t z2;
.Dl } jkiss64_seed_t;
.Sh EXAMPLES
Do check the init for errors
.Pp
.Dl #include <err.h>
.Dl ...
.Dl \& \& \& \&  if (jkiss64_init(NULL) != 0)
.Dl \& \& \& \& \& \& \& \&  err(1, \&"jkiss init failed\&");
.Pp
and also on initialization in any subsequent threads.
.Pp
.Dl \& \& \& \&  if (jkiss64_init_thread() != 0)
.Dl \& \& \& \& \& \& \& \&  err(1, \&"jkiss thread init failed\&");
.Pp
.Sh SEE ALSO
.Xr arc4random 3
.Rs
.%A David Jones
.%D May 7 2010
.%T Good Practice in (Pseudo) Random Number Generation for Bioinformatics Applications
.Re
.Sh AUTHORS
.An Jeremy Mates
.Sh CAVEATS
JKISS is not a cryptographic RNG; if cryptographically secure random
bits are required consider an alternative such as the ISAAC cipher.
libsodium is another option with good portability.
.Pp
There are many
.Xr abort 3
calls in lieu of proper error handling.
.Pp
The lack of unit tests.
